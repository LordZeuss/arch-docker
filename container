#!/bin/bash

echo "
___  ____ _  _ ____    _ _  _ ____ ___ ____ _    _    ____ ____
  /  |___ |  | [__     | |\ | [__   |  |__| |    |    |___ |__/
 /__ |___ |__| ___]    | | \| ___]  |  |  | |___ |___ |___ |  \

"

#This is a script to help install essentials for docker.

#ERROR FIX: If you are getting an issue where permission is denied while trying to connect to docker daemon socket, you may need to run this script after running the following command:
#exec su -l $USER
#Put in your password and then try running the script again.

#This script will install portainer, sonarr, radarr, and jackett.

######################################################################
mkdir /home/$USER/arch-docker/Containers

#Pre-usage
echo "NOTICE: You need to edit the script to map the paths for certain containers (such as torrent clients and things such as sonarr)"
echo "Please view the script's code and edit the paths for containers that need a path. You may not need to change anything depending on the containers you add. Double check the code to be safe."
echo " "
echo " "
echo "Would you like to continue to installing the containers? (y/n/e)"
echo "y=yes | n=no | e=exit-installer"

read yesorno

if [ "$yesorno" = y ]; then
	echo "Continuing..."
	echo " "
elif [ "$yesorno" = n ]; then
	echo "Exiting. Goodbye!"
	echo " "
else
	echo "Not a valid answer. Exiting..."
	exit 1
fi


#Install Portainer

echo "Would you like to install Portainer (Required)? (y/n/e)"

read yesorno

if [ "$yesorno" = y ]; then
	docker volume create portainer_data
	docker run -d \
  -p 8000:8000 -p 9000:9000 \
  --name portainer \
  --restart=always \
  -v /var/run/docker.sock:/var/run/docker.sock \
  -v portainer_data:/data \
  portainer/portainer-ce
	echo " "
	echo "Completed."
	echo " "
elif [ "$yesorno" = n ]; then
	echo "Skipping..."
	echo " "
else
	echo "Not a valid answer. Exiting..."
	exit 1
fi

#Install Sonarr

echo "Would you like to install Sonarr? (y/n/e)"

read yesorno

if [ "$yesorno" = y ]; then
	mkdir /home/$USER/arch-docker/Containers/sonarr
	docker run -d \
  --name=sonarr \
  -e PUID=1000 \
  -e PGID=1000 \
  -e TZ=US/Central \
  -p 8989:8989 \
  -v /home/$USER/arch-docker/Containers/sonarr:/config \
  -v /path/to/tvseries:/tv `#optional` \
  -v /path/to/downloadclient-downloads:/downloads `#optional` \
  --restart unless-stopped \
  linuxserver/sonarr
	echo " "
	echo "Completed."
	echo " "
elif [ "$yesorno" = n ]; then
	echo "Skipping..."
	echo " "
else
	echo "Not a valid answer. Exiting..."
	exit 1
fi

#Radarr

echo "Would you like to install Radarr? (y/n/e)"

read yesorno

if [ "$yesorno" = y ]; then
	mkdir /home/$USER/arch-docker/Containers/radarr
	docker run -d \
  --name=radarr \
  -e PUID=1000 \
  -e PGID=1000 \
  -e TZ=US/Central \
  -p 7878:7878 \
  -v /home/$USER/arch-docker/radarr:/config \
  -v /path/to/movies:/movies `#optional` \
  -v /path/to/downloadclient-downloads:/downloads `#optional` \
  --restart unless-stopped \
  linuxserver/radarr
	echo " "
	echo "Completed."
	echo " "
elif [ "$yesorno" = n ]; then
	echo "Skipping..."
	echo " "
else
	echo "Not a valid answer. Exiting..."
	exit 1
fi

#Jackett

echo "Would you like to install Jackett? (y/n/e)"

read yesorno

if [ "$yesorno" = y ]; then
	mkdir /home/$USER/arch-docker/Containers/jackett
	docker run -d \
  --name=jackett \
  -e PUID=1000 \
  -e PGID=1000 \
  -e TZ=US/Central \
  -e AUTO_UPDATE=true `#optional` \
  -e RUN_OPTS=<run options here> `#optional` \
  -p 9117:9117 \
  -v /home/$USER/arch-docker/Containers/jackett:/config \
  -v <path to blackhole>:/downloads \
  --restart unless-stopped \
  linuxserver/jackett
	echo " "
	echo "Completed."
	echo " "
elif [ "$yesorno" = n ]; then
	echo "Skipping..."
	echo " "
else
	echo "Not a valid answer. Exiting..."
	exit 1
fi

#Bazarr

echo "Would you like to install Bazarr? (y/n/e)"

read yesorno

if [ "$yesorno" = y ]; then
	mkdir /home/$USER/arch-docker/Containers/bazarr
	docker run -d \
  --name=bazarr \
  -e PUID=1000 \
  -e PGID=1000 \
  -e TZ=US/Central \
  -p 6767:6767 \
  -v /home/$USER/arch-docker/Containers/bazarr:/config \
  -v /path/to/movies:/movies `#optional` \
  -v /path/to/tv:/tv `#optional` \
  --restart unless-stopped \
  linuxserver/bazarr
	echo " "
	echo "Completed."
	echo " "
elif [ "$yesorno" = n ]; then
	echo "Skipping..."
	echo " "
else
	echo "Not a valid answer. Exiting..."
	exit 1
fi

#Readarr

echo "Would you like to install Readarr? (y/n/e)"

read yesorno

if [ "$yesorno" = y ]; then
	mkdir /home/$USER/arch-docker/Containers/readarr
	docker run -d \
  --name=readarr \
  -e PUID=1000 \
  -e PGID=1000 \
  -e TZ=US/Central \
  -p 8787:8787 \
  -v /home/$USER/arch-docker/Containers/readarr:/config \
  -v /path/to/books:/books `#optional` \
  -v /path/to/downloadclient-downloads:/downloads `#optional` \
  --restart unless-stopped \
  linuxserver/readarr:develop
	echo " "
	echo "Completed."
	echo " "
elif [ "$yesorno" = n ]; then
	echo "Skipping..."
	echo " "
else
	echo "Not a valid answer. Exiting..."
	exit 1
fi

#Lidarr (Music)

echo "Would you like to install Lidarr (Music)? (y/n/e)"

read yesorno

if [ "$yesorno" = y ]; then
	mkdir /home/$USER/arch-docker/Containers/lidarr
	docker run -d \
  --name=lidarr \
  -e PUID=1000 \
  -e PGID=1000 \
  -e TZ=US/Central \
  -p 8686:8686 \
  -v /home/$USER/arch-docker/Containers/lidarr:/config \
  -v /path/to/music:/music `#optional` \
  -v /path/to/downloads:/downloads `#optional` \
  --restart unless-stopped \
  linuxserver/lidarr
	echo " "
	echo "Completed."
	echo " "
elif [ "$yesorno" = n ]; then
	echo "Skipping..."
	echo " "
else
	echo "Not a valid answer. Exiting..."
	exit 1
fi

#Adguard Home

echo "Would you like to install Adguard Home (DNS Adblocker)? (y/n/e)"

read yesorno

if [ "$yesorno" = y ]; then
	mkdir /home/$USER/arch-docker/Containers/adguard
	mkdir /home/$USER/arch-docker/Containers/adguard/work
	mkdir /home/$USER/arch-docker/Containers/adguard/conf
	docker pull adguard/adguardhome
	docker run --name adguardhome\
    --restart unless-stopped\
    -v /home/$USER/arch-docker/Containers/adguard/work:/opt/adguardhome/work\
    -v //home/$USER/arch-docker/Containers/adguard/conf:/opt/adguardhome/conf\
    -p 53:53/tcp -p 53:53/udp\
    -p 67:67/udp -p 68:68/udp\
    -p 80:80/tcp -p 443:443/tcp -p 443:443/udp -p 3000:3000/tcp\
    -p 853:853/tcp\
    -p 784:784/udp -p 853:853/udp -p 8853:8853/udp\
    -p 5443:5443/tcp -p 5443:5443/udp\
    -d adguard/adguardhome
	echo " "
	echo "Completed."
	echo " "
elif [ "$yesorno" = n ]; then
	echo "Skipping..."
	echo " "
else
	echo "Not a valid answer. Exiting..."
	exit 1
fi

#Heimdall

echo "Would you like to install Heimdall (Organize Docker Containers)? (y/n/e)"

read yesorno

if [ "$yesorno" = y ]; then
	mkdir /home/$USER/arch-docker/Containers/heimdall
	docker run -d \
  --name=heimdall \
  -e PUID=1000 \
  -e PGID=1000 \
  -e TZ=US/Central \
  -p 80:80 \
  -p 443:443 \
  -v /home/$USER/arch-docker/Containers/heimdall:/config \
  --restart unless-stopped \
  linuxserver/heimdall
	echo " "
	echo "Completed."
	echo " "
elif [ "$yesorno" = n ]; then
	echo "Skipping..."
	echo " "
else
	echo "Not a valid answer. Exiting..."
	exit 1
fi

#Pihole

echo "Would you like to install Pi-hole (DNS Adblocker)? (y/n/e)"

read yesorno

if [ "$yesorno" = y ]; then
	mkdir /home/$USER/arch-docker/Containers/pihole
	# Note: ServerIP should be replaced with your external ip.
docker run -d \
    --name pihole \
    -p 53:53/tcp -p 53:53/udp \
    -p 80:80 \
    -e TZ="America/Chicago" \
    -v "${PIHOLE_BASE}/etc-pihole:/etc/pihole" \
    -v "${PIHOLE_BASE}/etc-dnsmasq.d:/etc/dnsmasq.d" \
    --dns=127.0.0.1 --dns=1.1.1.1 \
    --restart=unless-stopped \
    --hostname pi.hole \
    -e VIRTUAL_HOST="pi.hole" \
    -e PROXY_LOCATION="pi.hole" \
    -e ServerIP="127.0.0.1" \
    pihole/pihole:latest
	echo " "
	echo "Completed."
	echo " "
elif [ "$yesorno" = n ]; then
	echo "Skipping..."
	echo " "
else
	echo "Not a valid answer. Exiting..."
	exit 1
fi

#Transmission

echo "Would you like to install Transmission (Torrent Client)? (y/n/e)"

read yesorno

if [ "$yesorno" = y ]; then
	mkdir /home/$USER/arch-docker/Containers/transmission
	docker run -d \
  --name=transmission \
  -e PUID=1000 \
  -e PGID=1000 \
  -e TZ=US/Central \
  -e TRANSMISSION_WEB_HOME=/combustion-release/ `#optional` \
  -e USER=username `#optional` \
  -e PASS=password `#optional` \
  -e WHITELIST=iplist `#optional` \
  -e PEERPORT=peerport `#optional` \
  -e HOST_WHITELIST=dnsnane list `#optional` \
  -p 9091:9091 \
  -p 51413:51413 \
  -p 51413:51413/udp \
  -v /home/$USER/arch-docker/Containers/transmission:/config \
  -v <path to downloads>:/downloads \
  -v <path to watch folder>:/watch \
  --restart unless-stopped \
  linuxserver/transmission
	echo " "
	echo "Completed."
	echo " "
elif [ "$yesorno" = n ]; then
	echo "Skipping..."
	echo " "
else
	echo "Not a valid answer. Exiting..."
	exit 1
fi

#Deluge

echo "Would you like to install Deluge (Torrent Client)? (y/n/e)"

read yesorno

if [ "$yesorno" = y ]; then
	mkdir /home/$USER/arch-docker/Containers/deluge
	docker run -d \
  --name=deluge \
  -e PUID=1000 \
  -e PGID=1000 \
  -e TZ=US/Central \
  -e DELUGE_LOGLEVEL=error `#optional` \
  -p 8112:8112 \
  -p 6881:6881 \
  -p 6881:6881/udp \
  -v /home/$USER/arch-docker/Containers/deluge:/config \
  -v /path/to/your/downloads:/downloads \
  --restart unless-stopped \
  linuxserver/deluge
	echo " "
	echo "Completed."
	echo " "
elif [ "$yesorno" = n ]; then
	echo "Skipping..."
	echo " "
else
	echo "Not a valid answer. Exiting..."
	exit 1
fi

#qBittorrent

echo "Would you like to install qBittorrent (Torrent Client)? (y/n/e)"

read yesorno

if [ "$yesorno" = y ]; thenS/Central
	mkdir /home/$USER/arch-docker/Containers/qbittorrent
	docker run -d \
  --name=qbittorrent \
  -e PUID=1000 \
  -e PGID=1000 \
  -e TZ=US/Central \
  -e WEBUI_PORT=8080 \
  -p 8080:8080 \
  -p 6881:6881 \
  -p 6881:6881/udp \
  -v /home/$USER/arch-docker/Containers/qbittorrent:/config \
  -v /path/to/downloads:/downloads \
  --restart unless-stopped \
  linuxserver/qbittorrent
	echo " "
	echo "Completed."
	echo " "
elif [ "$yesorno" = n ]; then
	echo "Skipping..."
	echo " "
else
	echo "Not a valid answer. Exiting..."
	exit 1
fi

echo "Goodbye!"
